2023-11-14 패스트 캠퍼스 
            한번에 끝내는 Java/Spring 웹 개발 마스터 초격차 패키지 Online
                    Part 4-1 안정적인 서비스를 위한 스프링 DATA와 Security - JPA 프로그래밍
                        ch.09 커스텀 쿼리 사용하기
                            3.Converter 사용하기
                                데이터를 들고 올때 원하는 값으로 들고오도록 하는 기능
                                Enum을 쓸 때 자주 사용한다
                                status가 200일 때 진열한다고 했을 때

                                @Convert(converter = BookStatusConverter.class)
                                private BookStatus status;

                                public class BookStatus {
                                    private int code;
                                    private String description;

                                    public BookStatus(int code) {
                                        this.code = code;
                                        this.description = parseDescription(code);
                                    }

                                    public boolean isDisplayed() {
                                        return code == 200;
                                    }

                                    private String parseDescription(int code) {
                                        switch (code) {
                                            case 100:
                                                return "판매종료";
                                            case 200:
                                                return "판매중";
                                            case 300:
                                                return "판매보류";
                                            default:
                                                return "미지원";
                                        }
                                    }
                                }

                                @Converter
                                public class BookStatusConverter implements AttributeConverter<BookStatus, Integer>{
                                        @Override
                                        public Integer convertToDatabaseColumn(BookStatus attribute) {
                                            return attribute.getCode();
                                        }

                                        @Override
                                        public BookStatus convertToEntityAttribute(Integer dbData) {
                                            return dbData != null ? new BookStatus(dbData) : null;
                                        }
                                } 
                                반드시 두개 다 구현해야함 convertToDatabaseColumn 구현하지 않을 경우 @Transactional 달 경우 영속성 컨텍스트가 변경된것으로 인식

                                autoapply - 선정된 객체타입으로 컨버터를 연결해줌                            
            Udemy
               JavaScript 완벽 가이드 : 초급 + 고급 마스터 과정
                    74."if"문 & 불리언 (비교) 연산자의 소개
                        특정 조건을 통해 두개의 함수중 하나의 함수를 부를 수 있음
                        if의 결과는 Booleans으로 나옴
                        Boolean Operator 
                            == : 두값을 비교하여 같으면 true 다르면 false
                            != : 두값을 비교하여 같으면 false 다르면 true
                            === and !== : 값과 자료값까지 같은지 비교하여 Boolean값이 나옴
                            > & < : 크기를 비교하여 Boolean 값으로 나옴
                            >= & <= : 크기를 비교하여 Boolean 값으로 나옴
                            ! : 체크하려는 값이 true가 아닐경우 true 아니면 false
                    75.텍스트 비교 & 조건에서 불리언 사용하기
                        단순 Boolean값일 경우 그냥 사용해도됨
                        const isLoggedIn = true;
                        if (isLoggedIn) {
                            // This code will execute because isLoggedIn is true => A valid condition
                        }
                        부정할경우 앞에 !를 붙이면 됨
                        const isLoggedIn = true;
                        if (!isLoggedIn) {
                          // This would NOT execute
                        } else {
                            // This would execute because isLoggedIn is true and hence !== true yields false
                        }

                        텍스트 비교
                            JavaScript는 항상 첫 번째 문자를 보고, 첫 번째 문자가 유사한 경우에만 
                            다른 문자를 고려합니다. 또한 대문자는 소문자보다 작은 것으로 간주됩니다.
                            'ab' > 'aa' // true
                            'a' > 'B' // true
                            'a' > 'b' // false